AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >
  AWS SAM template to deploy Serverless Tarot Card Shuffle Draw Service

Parameters:
  OriginAccessControlConfigName:
    Default: TarotImages
    Type: String

  DomainName:
    Type: String
    Description: "The custom domain name for the API"

  HostedZoneId:
    Type: String
    Description: "The ID of the Route 53 hosted zone for the domain"

  DefaultThrottlingRateLimit:
    Default: "100"
    Type: Number

  DefaultThrottlingBurstLimit:
    Default: "200"
    Type: Number

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 10
    Environment:
      Variables:
        CLOUDFRONT_URL: !Sub "https://${TarotCloudFrontDistribution.DomainName}"

Resources:
  OptionsPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: OptionsPageFunction
      Handler: main
      CodeUri: ./optionsPage
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref TarotApi

  DrawFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DrawFunction
      Handler: main
      CodeUri: ./handleDraw
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        DrawPost:
          Type: HttpApi
          Properties:
            Path: /draw
            Method: POST
            ApiId: !Ref TarotApi

  LicensePageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LicensePageFunction
      Handler: main
      CodeUri: licensePage/
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LicensePage:
          Type: HttpApi
          Properties:
            Path: /license
            Method: GET
            ApiId: !Ref TarotApi

  TarotApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref ApiCertificate
        Route53:
          HostedZoneId: !Ref HostedZoneId
      DefaultRouteSettings:
        ThrottlingRateLimit: !Ref DefaultThrottlingRateLimit
        ThrottlingBurstLimit: !Ref DefaultThrottlingBurstLimit

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${TarotApi}/logs"
      RetentionInDays: 7
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  TarotImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "tarot-images-bucket-${AWS::AccountId}-${AWS::Region}"

  TarotImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TarotImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${TarotImagesBucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${TarotCloudFrontDistribution}"

  TarotCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref OriginAccessControlConfigName
        Description: OAC for Tarot Images
        SigningProtocol: sigv4
        SigningBehavior: always
        OriginAccessControlOriginType: s3

  TarotCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt TarotImagesBucket.DomainName
            Id: TarotImagesBucketOrigin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref TarotCloudFrontOriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: TarotImagesBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        DefaultRootObject: index.html

Outputs:
  ApiUrl:
    Description: "HTTP API endpoint URL for the Prod stage"
    Value: !Sub "https://${TarotApi}.execute-api.${AWS::Region}.amazonaws.com/"

  ImagesBucketName:
    Description: "S3 Bucket for Tarot Images"
    Value: !Ref TarotImagesBucket

  CloudFrontDistribution:
    Description: "CloudFront distribution URL"
    Value: !Sub "https://${TarotCloudFrontDistribution.DomainName}/"
