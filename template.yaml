AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS SAM template to deploy GoLang Lambda functions using Gin framework.

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 10

Resources:
  OptionsPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: OptionsPageFunction
      Handler: main
      CodeUri: ./optionsPage
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref TarotApi

  DrawFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DrawFunction
      Handler: main
      CodeUri: ./handleDraw
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        DrawPost:
          Type: HttpApi
          Properties:
            Path: /draw
            Method: POST
            ApiId: !Ref TarotApi

  LicensePageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: provided.al2
      CodeUri: licensePage/
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LicensePage:
          Type: HttpApi
          Properties:
            Path: /license
            Method: GET
            ApiId: !Ref TarotApi

  TarotApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CorsConfiguration:
      #   AllowOrigins: "'*'"
      #   AllowHeaders: "'Content-Type'"
      #   AllowMethods: "'GET,POST,OPTIONS'"
      StageName: $default # Ensure we are using the $default stage
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${TarotApi}/logs"
      RetentionInDays: 7
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

Outputs:
  ApiUrl:
    Description: "HTTP API endpoint URL for the Prod stage"
    Value: !Sub "https://${TarotApi}.execute-api.${AWS::Region}.amazonaws.com/"
