AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS SAM template to deploy a GoLang Lambda function using Gin framework.

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 10

Resources:
  TarotDrawFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TarotDrawFunction
      Handler: main
      CodeUri: .
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaRole
      Events:
        RootGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: GET
        DrawPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /draw
            Method: POST
        DrawOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /draw
            Method: OPTIONS
        LicenseGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /license
            Method: GET

  TarotDrawFunctionResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TarotDrawFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'content-type,authorization'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TarotDrawFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: aws_proxy
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
          /draw:
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TarotDrawFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: aws_proxy
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
          /license:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TarotDrawFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: GET
                type: aws_proxy
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  TarotDrawFunctionArn:
    Description: "Tarot Draw Function ARN"
    Value: !GetAtt TarotDrawFunction.Arn
