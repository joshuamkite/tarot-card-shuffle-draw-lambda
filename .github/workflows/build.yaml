name: Go CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches:
      - "**"

jobs:
  test:
    name: Test on all branches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.22"

      - name: Test
        run: go test ./...

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: "linux/amd64"
            GOOS: "linux"
            GOARCH: "amd64"
          - platform: "darwin/amd64"
            GOOS: "darwin"
            GOARCH: "amd64"
          - platform: "darwin/arm64"
            GOOS: "darwin"
            GOARCH: "arm64"
          - platform: "windows/amd64"
            GOOS: "windows"
            GOARCH: "amd64"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.17" # Adjust to match your Go version

      - name: Build
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          go build -o ./bin/tarot_${GOOS}_${GOARCH}${{ matrix.GOOS == 'windows' && '.exe' || '' }} main.go
          zip tarot_${GOOS}_${GOARCH}.zip ./bin/tarot_${GOOS}_${GOARCH}${{ matrix.GOOS == 'windows' && '.exe' || '' }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tarot-${{ matrix.platform }}
          path: tarot_${{ matrix.GOOS }}_${{ matrix.GOARCH }}.zip

  release:
    name: Create Release and Upload Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: Binaries

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tarot_linux_amd64.zip
          asset_name: tarot_linux_amd64.zip
          asset_content_type: application/zip
        # Repeat the above step for each binary you have, adjusting asset_path and asset_name accordingly.
